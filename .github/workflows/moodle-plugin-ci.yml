name: Moodle Plugin CI

on:
  workflow_call:
    inputs:
      moodle-core-branch:
        description: Run the tests on this Moodle core branch (if not provided, the branch will be auto-detected from current branch)
        type: string
        required: false
      plugin-dependencies:
        description: List of plugin dependencies with repository and branch (use one dependency per line and separate repository and branch with a comma)
        type: string
        required: false
      one-db-only:
        description: Use only PostgreSQL database instead of all configured databases
        type: boolean
        required: false
        default: false
      max-parallel-verify:
        description: Maximum number of parallel jobs for the verify job (if not set, no limit applies)
        type: number
        required: false
      redis-enabled:
        description: Start Redis service before running runtime tests
        type: boolean
        required: false
        default: false
      php-extensions:
        description: Additional PHP extensions to install (comma-separated, e.g. "redis,memcached")
        type: string
        required: false
      docker-compose-file:
        description: Path to Docker Compose file (relative to plugin repository root) for starting an additional service
        type: string
        required: false
      behat-suite:
        description: The theme to be used for running Behat tests (e.g. "boost_union")
        type: string
        required: false
      behat-timeout:
        description: Behat timeout multiplier (e.g. 3 for 3x timeout)
        type: number
        required: false
      pr-check-diff-contains:
        description: Pull request diff must contain this text
        type: string
        required: false
      pr-check-diff-does-not-contain:
        description: Pull request diff must not contain this text
        type: string
        required: false
      pr-check-body-contains:
        description: Pull request body must contain this text
        type: string
        required: false
      pr-check-body-does-not-contain:
        description: Pull request body must not contain this text
        type: string
        required: false
      pr-check-files-changed:
        description: Number of files that must have changed in pull request
        type: string
        required: false
      pr-check-lines-changed:
        description: Number of lines that must have changed in pull request
        type: string
        required: false
      pr-check-waived-users:
        description: Comma-separated list of users exempt from pull request checks
        type: string
        required: false
      phpcs-continue-on-error:
        description: Continue on error for Moodle Code Checker (phpcs)
        type: boolean
        required: false
        default: false
      mustache-continue-on-error:
        description: Continue on error for Mustache Lint
        type: boolean
        required: false
        default: false
      scss-deprecations:
        description: Include SCSS deprecation warnings in Behat tests
        type: boolean
        required: false
        default: true

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}-${{ inputs.moodle-core-branch || 'auto' }}
  cancel-in-progress: true

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-latest
    outputs:
      matrix-static: ${{ steps.preflight-matrix.outputs.matrix-static }}
      matrix-run: ${{ steps.preflight-matrix.outputs.matrix-run }}
      matrix-verify: ${{ steps.preflight-matrix.outputs.matrix-verify }}
      moodle-core-branch: ${{ steps.determine-branch.outputs.moodle-core-branch }}
    steps:
      - name: Checkout calling plugin repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: calling-repo

      - name: Determine Moodle core branch
        id: determine-branch
        run: |
          # If a moodle-core-branch input is provided, use it.
          if [ -n "${{ inputs.moodle-core-branch }}" ]; then
            MOODLE_BRANCH="${{ inputs.moodle-core-branch }}"
            echo "Using provided moodle-core-branch: $MOODLE_BRANCH"
          # If not provided, auto-detect from current branch and plugin configuration.
          else
            # Get the calling repository and branch.
            CURRENT_BRANCH="${{ github.ref_name }}"
            echo "Current branch: $CURRENT_BRANCH"

            # If current branch matches MOODLE_xxx_STABLE pattern, use it.
            if [[ "$CURRENT_BRANCH" =~ ^MOODLE_[0-9]+_STABLE$ ]]; then
              MOODLE_BRANCH="$CURRENT_BRANCH"
              echo "Using current branch: $MOODLE_BRANCH"
            # If on main branch, find the highest available MOODLE_xxx_STABLE branch.
            elif [ "$CURRENT_BRANCH" = "main" ]; then
              echo "Main branch detected, searching for highest MOODLE_xxx_STABLE branch..."

              # Get all remote MOODLE_xxx_STABLE branches and find the highest number
              HIGHEST_BRANCH=$(cd calling-repo && git branch -r | grep -E 'origin/MOODLE_[0-9]+_STABLE' | \
                sed 's|origin/||' | sed 's/MOODLE_\([0-9]\+\)_STABLE/\1 &/' | \
                sort -n | tail -1 | awk '{print $2}')

              if [ -n "$HIGHEST_BRANCH" ]; then
                MOODLE_BRANCH="$HIGHEST_BRANCH"
                echo "Found highest MOODLE branch: $MOODLE_BRANCH"
              else
                echo "No MOODLE_xxx_STABLE branches found, checking version.php..."
                MOODLE_BRANCH="" # Will be handled by version.php fallback below
              fi
            # For any other branch, we'll use the version.php fallback
            else
              echo "Branch '$CURRENT_BRANCH' doesn't match known patterns, checking version.php..."
              MOODLE_BRANCH="" # Will be handled by version.php fallback below
            fi

            # Fallback: Extract Moodle version from version.php
            if [ -z "$MOODLE_BRANCH" ]; then
              if [ -f "calling-repo/version.php" ]; then
                # Look for $plugin->supported = [min, max]; pattern
                SUPPORTED_LINE=$(grep -E '^\$plugin->supported\s*=' calling-repo/version.php | head -1)

                if [ -n "$SUPPORTED_LINE" ]; then
                  echo "Found supported line: $SUPPORTED_LINE"

                  # Extract the second number from the array [min, max]
                  MAX_VERSION=$(echo "$SUPPORTED_LINE" | sed -E 's/.*\[\s*[0-9]+\s*,\s*([0-9]+)\s*\].*/\1/')

                  if [[ "$MAX_VERSION" =~ ^[0-9]+$ ]]; then
                    MOODLE_BRANCH="MOODLE_${MAX_VERSION}_STABLE"
                    echo "Extracted maximum supported version: $MAX_VERSION"
                    echo "Using derived Moodle branch: $MOODLE_BRANCH"
                  else
                    echo "Error: Could not parse maximum version from: $SUPPORTED_LINE"
                    exit 1
                  fi
                else
                  echo "Error: No \$plugin->supported line found in version.php"
                  echo "Error: Please provide an explicit 'moodle-core-branch' input parameter"
                  exit 1
                fi
              else
                echo "Error: No version.php file found in repository root"
                echo "Error: This does not seem to be a Moodle plugin."
                exit 1
              fi
            fi
          fi

          echo "moodle-core-branch=$MOODLE_BRANCH" >> $GITHUB_OUTPUT
          echo "Final Moodle branch: $MOODLE_BRANCH"

      - name: Check out moodle-workflows repository code
        uses: actions/checkout@v4
        with:
          repository: moodle-an-hochschulen/moodle-workflows
          ref: main
          path: preflight

      - name: Create CI matrix from JSON
        id: preflight-matrix
        run: |
          # Use the detected branch from the previous step
          DETECTED_BRANCH="${{ steps.determine-branch.outputs.moodle-core-branch }}"

          # Read the matrix configuration for the detected moodle-core-branch
          BRANCH_CONFIG=$(cat preflight/.github/workflows/moodle-plugin-ci.matrix/matrix.json | jq -c --arg branch "$DETECTED_BRANCH" '.[$branch]')

          # Create the run matrix with highest PHP version and postgres only
          MATRIX_RUN_JSON=$(echo "$BRANCH_CONFIG" | jq -c '
            [{
              "moodle-core-branch": $ARGS.named.branch,
              "php": (.php | max),
              "database": "pgsql",
              "extensions": ((.extensions // []) | join(","))
            }]' --arg branch "$DETECTED_BRANCH")

          # Add custom PHP extensions if provided
          if [ -n "${{ inputs.php-extensions }}" ]; then
            CUSTOM_EXTENSIONS='${{ inputs.php-extensions }}'
            MATRIX_RUN_JSON=$(echo "$MATRIX_RUN_JSON" | jq -c --arg ext "$CUSTOM_EXTENSIONS" '
              map(.extensions = if .extensions == "" then $ext else (.extensions + "," + $ext) end)
            ')
          fi

          echo "matrix-run={\"include\":$MATRIX_RUN_JSON}" >> $GITHUB_OUTPUT

          # Create the verify matrix with remaining combinations (excluding the initial one)
          if [ "${{ inputs.one-db-only }}" = "true" ]; then
            # Use only PostgreSQL when one-db-only is true, but exclude the highest PHP version
            MATRIX_VERIFY_JSON=$(echo "$BRANCH_CONFIG" | jq -c '
              [.php[] as $php | select($php != (.php | max)) | {
                "moodle-core-branch": $ARGS.named.branch,
                "php": $php,
                "database": "pgsql",
                "extensions": ((.extensions // []) | join(","))
              }]' --arg branch "$DETECTED_BRANCH")
          else
            # Use all configured databases, but exclude highest PHP + PostgreSQL combination
            MATRIX_VERIFY_JSON=$(echo "$BRANCH_CONFIG" | jq -c '
              [.php[] as $php | .database[] as $db |
               select(($php == (.php | max) and $db == "pgsql") | not) | {
                "moodle-core-branch": $ARGS.named.branch,
                "php": $php,
                "database": $db,
                "extensions": ((.extensions // []) | join(","))
              }]' --arg branch "$DETECTED_BRANCH")
          fi

          # Add custom PHP extensions if provided
          if [ -n "${{ inputs.php-extensions }}" ]; then
            CUSTOM_EXTENSIONS='${{ inputs.php-extensions }}'
            MATRIX_VERIFY_JSON=$(echo "$MATRIX_VERIFY_JSON" | jq -c --arg ext "$CUSTOM_EXTENSIONS" '
              map(.extensions = if .extensions == "" then $ext else (.extensions + "," + $ext) end)
            ')
          fi

          echo "matrix-verify={\"include\":$MATRIX_VERIFY_JSON}" >> $GITHUB_OUTPUT

          # Create static matrix with highest PHP version and postgres only
          MATRIX_STATIC_JSON=$(echo "$BRANCH_CONFIG" | jq -c '
            {
              "moodle-core-branch": $ARGS.named.branch,
              "php": (.php | max),
              "database": "pgsql",
              "extensions": ((.extensions // []) | join(","))
            }' --arg branch "$DETECTED_BRANCH")

          # Add custom PHP extensions if provided
          if [ -n "${{ inputs.php-extensions }}" ]; then
            CUSTOM_EXTENSIONS='${{ inputs.php-extensions }}'
            MATRIX_STATIC_JSON=$(echo "$MATRIX_STATIC_JSON" | jq -c --arg ext "$CUSTOM_EXTENSIONS" '
              .extensions = if .extensions == "" then $ext else (.extensions + "," + $ext) end
            ')
          fi

          echo "matrix-static={\"include\":[$MATRIX_STATIC_JSON]}" >> $GITHUB_OUTPUT

      - name: (Debug) Generated CI Matrix
        run: |
          echo "Detected branch:"
          echo "${{ steps.determine-branch.outputs.moodle-core-branch }}"
          echo ""
          echo "Matrix for static job:"
          echo "${{ steps.preflight-matrix.outputs.matrix-static }}"
          echo ""
          echo "Matrix for run job:"
          echo "${{ steps.preflight-matrix.outputs.matrix-run }}"
          echo ""
          echo "Matrix for verify job:"
          echo "${{ steps.preflight-matrix.outputs.matrix-verify }}"

  static:
    name: Static checks
    runs-on: ubuntu-22.04
    needs: preflight

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_HOST_AUTH_METHOD: 'trust'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.preflight.outputs.matrix-static) }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          path: plugin

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ matrix.extensions }}
          ini-values: max_input_vars=5000
          coverage: none

      - name: Initialise moodle-plugin-ci
        run: |
          composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci ci ^4
          echo $(cd ci/bin; pwd) >> $GITHUB_PATH
          echo $(cd ci/vendor/bin; pwd) >> $GITHUB_PATH
          sudo locale-gen en_AU.UTF-8
          echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV

      - name: Add plugin dependencies
        if: ${{ inputs.plugin-dependencies != '' }}
        run: |
          # Process plugin dependencies line by line, skipping empty lines
          echo "${{ inputs.plugin-dependencies }}" | while IFS=',' read -r repo branch; do
            # Skip empty lines
            if [ -n "$repo" ] && [ -n "$branch" ]; then
              echo "Adding plugin dependency: $repo (branch: $branch)"
              moodle-plugin-ci add-plugin --branch "$branch" "$repo"
            fi
          done

      - name: Install moodle-plugin-ci
        run: moodle-plugin-ci install --plugin ./plugin --db-host=127.0.0.1
        env:
          DB: ${{ matrix.database }}
          MOODLE_BRANCH: ${{ matrix.moodle-core-branch }}

      - name: PHP Lint
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci phplint

      - name: PHP Mess Detector
        continue-on-error: true # This step will show errors but will not fail
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci phpmd

      - name: Moodle Code Checker
        if: ${{ !cancelled() }}
        continue-on-error: ${{ inputs.phpcs-continue-on-error }}
        run: moodle-plugin-ci phpcs --max-warnings 0

      - name: Pull request content checker
        uses: JJ/github-pr-contains-action@releases/v14
        if: ${{ !cancelled() && github.event_name == 'pull_request' && (inputs.pr-check-diff-contains != '' || inputs.pr-check-diff-does-not-contain != '' || inputs.pr-check-body-contains != '' || inputs.pr-check-body-does-not-contain != '' || inputs.pr-check-files-changed != '' || inputs.pr-check-lines-changed != '' || inputs.pr-check-waived-users != '') }}
        with:
          github-token: ${{ github.token }}
          diffContains: ${{ inputs.pr-check-diff-contains }}
          diffDoesNotContain: ${{ inputs.pr-check-diff-does-not-contain }}
          bodyContains: ${{ inputs.pr-check-body-contains }}
          bodyDoesNotContain: ${{ inputs.pr-check-body-does-not-contain }}
          filesChanged: ${{ inputs.pr-check-files-changed }}
          linesChanged: ${{ inputs.pr-check-lines-changed }}
          waivedUsers: ${{ inputs.pr-check-waived-users }}

      - name: Moodle PHPDoc Checker
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci phpdoc --max-warnings 0

      - name: Development Leftover Checker
        if: ${{ !cancelled() }}
        run: |
          echo "Checking for development leftovers..."

          # Define patterns to search for
          PATTERNS=("@testme" "TODO" "<<<<<<< HEAD")

          # Check each pattern
          FOUND_ISSUES=false
          for pattern in "${PATTERNS[@]}"; do
            echo "Searching for: $pattern"
            if grep -rn --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=vendor "$pattern" ./plugin/; then
              FOUND_ISSUES=true
              echo ""
            fi
          done

          # Fail if any issues were found
          if [ "$FOUND_ISSUES" = true ]; then
            echo "Development leftovers detected! Please clean up the code."
            exit 1
          else
            echo "No development leftovers found."
          fi

      - name: Validating
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci validate

      - name: Check upgrade savepoints
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci savepoints

      - name: Mustache Lint
        if: ${{ !cancelled() }}
        continue-on-error: ${{ inputs.mustache-continue-on-error }}
        run: moodle-plugin-ci mustache

      - name: Grunt
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci grunt --max-lint-warnings 0

      - name: Mark cancelled jobs as failed.
        if: ${{ cancelled() }}
        run: exit 1

  run:
    name: Runtime tests
    runs-on: ubuntu-22.04
    needs: preflight

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_HOST_AUTH_METHOD: 'trust'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

      redis:
        image: ${{ inputs.redis-enabled && 'redis:latest' || '' }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 3

    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.preflight.outputs.matrix-run) }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          path: plugin

      - name: Start additional service from Docker Compose
        if: ${{ inputs.docker-compose-file != '' }}
        uses: adambirds/docker-compose-action@v1.5.0
        with:
          compose-file: ${{ github.workspace }}/plugin/${{ inputs.docker-compose-file }}

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ matrix.extensions }}
          ini-values: max_input_vars=5000
          coverage: none

      - name: Initialise moodle-plugin-ci
        run: |
          composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci ci ^4
          echo $(cd ci/bin; pwd) >> $GITHUB_PATH
          echo $(cd ci/vendor/bin; pwd) >> $GITHUB_PATH
          sudo locale-gen en_AU.UTF-8
          echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV

      - name: Add plugin dependencies
        if: ${{ inputs.plugin-dependencies != '' }}
        run: |
          # Process plugin dependencies line by line, skipping empty lines
          echo "${{ inputs.plugin-dependencies }}" | while IFS=',' read -r repo branch; do
            # Skip empty lines
            if [ -n "$repo" ] && [ -n "$branch" ]; then
              echo "Adding plugin dependency: $repo (branch: $branch)"
              moodle-plugin-ci add-plugin --branch "$branch" "$repo"
            fi
          done

      - name: Install moodle-plugin-ci
        run: moodle-plugin-ci install --plugin ./plugin --db-host=127.0.0.1
        env:
          DB: ${{ matrix.database }}
          MOODLE_BRANCH: ${{ matrix.moodle-core-branch }}

      - name: PHPUnit tests
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci phpunit --fail-on-warning

      - name: Raise Behat timeout
        if: ${{ !cancelled() && inputs.behat-timeout != '' }}
        run: moodle-plugin-ci add-config '$CFG->behat_increasetimeout = ${{ inputs.behat-timeout }};'

      - name: Behat features
        id: behat
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci behat --profile chrome${{ inputs.scss-deprecations && ' --scss-deprecations' || '' }}${{ inputs.behat-suite != '' && format(' --suite {0}', inputs.behat-suite) || '' }}

      - name: Upload Behat Faildump
        if: ${{ failure() && steps.behat.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: Behat Faildump (${{ join(matrix.*, ', ') }})
          path: ${{ github.workspace }}/moodledata/behat_dump
          retention-days: 7
          if-no-files-found: ignore

      - name: Mark cancelled jobs as failed.
        if: ${{ cancelled() }}
        run: exit 1

  verify:
    name: Runtime verification
    runs-on: ubuntu-22.04
    needs: [preflight, run]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: 'postgres'
          POSTGRES_HOST_AUTH_METHOD: 'trust'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

      mariadb:
        image: mariadb:10
        env:
          MYSQL_USER: 'root'
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          MYSQL_CHARACTER_SET_SERVER: "utf8mb4"
          MYSQL_COLLATION_SERVER: "utf8mb4_unicode_ci"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3

      redis:
        image: ${{ inputs.redis-enabled && 'redis:latest' || '' }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 3

    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max-parallel-verify || 999 }}
      matrix: ${{ fromJson(needs.preflight.outputs.matrix-verify) }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          path: plugin

      - name: Start additional service from Docker Compose
        if: ${{ inputs.docker-compose-file != '' }}
        uses: adambirds/docker-compose-action@v1.5.0
        with:
          compose-file: ${{ github.workspace }}/plugin/${{ inputs.docker-compose-file }}

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ matrix.extensions }}
          ini-values: max_input_vars=5000
          coverage: none

      - name: Initialise moodle-plugin-ci
        run: |
          composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci ci ^4
          echo $(cd ci/bin; pwd) >> $GITHUB_PATH
          echo $(cd ci/vendor/bin; pwd) >> $GITHUB_PATH
          sudo locale-gen en_AU.UTF-8
          echo "NVM_DIR=$HOME/.nvm" >> $GITHUB_ENV

      - name: Add plugin dependencies
        if: ${{ inputs.plugin-dependencies != '' }}
        run: |
          # Process plugin dependencies line by line, skipping empty lines
          echo "${{ inputs.plugin-dependencies }}" | while IFS=',' read -r repo branch; do
            # Skip empty lines
            if [ -n "$repo" ] && [ -n "$branch" ]; then
              echo "Adding plugin dependency: $repo (branch: $branch)"
              moodle-plugin-ci add-plugin --branch "$branch" "$repo"
            fi
          done

      - name: Install moodle-plugin-ci
        run: moodle-plugin-ci install --plugin ./plugin --db-host=127.0.0.1
        env:
          DB: ${{ matrix.database }}
          MOODLE_BRANCH: ${{ matrix.moodle-core-branch }}

      - name: PHPUnit tests
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci phpunit --fail-on-warning

      - name: Raise Behat timeout
        if: ${{ !cancelled() && inputs.behat-timeout != '' }}
        run: moodle-plugin-ci add-config '$CFG->behat_increasetimeout = ${{ inputs.behat-timeout }};'

      - name: Behat features
        id: behat
        if: ${{ !cancelled() }}
        run: moodle-plugin-ci behat --profile chrome${{ inputs.scss-deprecations && ' --scss-deprecations' || '' }}${{ inputs.behat-suite != '' && format(' --suite {0}', inputs.behat-suite) || '' }}

      - name: Upload Behat Faildump
        if: ${{ failure() && steps.behat.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: Behat Faildump (${{ join(matrix.*, ', ') }})
          path: ${{ github.workspace }}/moodledata/behat_dump
          retention-days: 7
          if-no-files-found: ignore

      - name: Mark cancelled jobs as failed.
        if: ${{ cancelled() }}
        run: exit 1
